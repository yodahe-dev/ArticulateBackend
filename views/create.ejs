<div class="max-w-2xl mx-auto bg-white p-6 mt-10 rounded-xl shadow-xl">
  <form id="createPostForm" action="/create/create" method="POST" enctype="multipart/form-data" class="space-y-6">
    <!-- Title -->
    <div>
      <label for="title" class="block font-medium text-gray-700">Title</label>
      <input type="text" id="title" name="title" required maxlength="100" placeholder="Enter post title"
        class="w-full mt-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#f8b102]">
      <span id="titleError" class="text-red-500 text-sm hidden">Title is required and should be less than 100 characters</span>
    </div>

    <!-- Content -->
    <div>
      <label for="content" class="block font-medium text-gray-700">Content</label>
      <textarea id="content" name="content" required maxlength="100000" rows="5" placeholder="Write your content here..."
        class="w-full mt-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#f8b102]"></textarea>
      <span id="contentError" class="text-red-500 text-sm hidden">Content is required and should be less than 100,000 characters</span>
    </div>

    <!-- Category -->
    <div>
      <label for="category" class="block font-medium text-gray-700">Category</label>
      <select id="category" name="category_id" required
        class="w-full mt-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#f8b102]">
        <option value="">Select a category</option>
        <% categories.forEach(category => { %>
          <option value="<%= category.category_id %>" data-emoji="<%= ['🌟','🎨','🚀','📚','🍕','⚡','🎉','💡','🌍','🎭','🏆','🍩'][Math.floor(Math.random()*12)] %>">
            <%= category.name %>
          </option>
        <% }) %>
      </select>
    </div>

    <!-- Thumbnail Upload -->
    <div>
      <label class="block font-medium text-gray-700 mb-2">Thumbnail</label>
      <div id="upload-area"
        class="flex items-center justify-center w-full h-40 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-[#f8b102] transition">
        <span class="text-gray-500">Drag & drop or click to upload</span>
        <input type="file" name="thumbnail" accept="image/*" id="thumbnail" class="hidden" required>
        <span id="fileError" class="text-red-500 text-sm hidden">Please upload a valid image file</span>
      </div>
      <div id="preview-container" class="relative mt-4 hidden">
        <img id="preview-image" src="#" alt="Preview"
          class="mx-auto max-h-64 rounded-lg object-contain transform transition duration-300">
        <div class="flex justify-center mt-2 space-x-4">
          <button type="button" onclick="zoom(-0.1)" class="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300">-</button>
          <button type="button" onclick="zoom(0.1)" class="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300">+</button>
        </div>
      </div>
    </div>

    <!-- Submit -->
    <div class="text-center">
      <button type="submit" class="bg-[#f8b102] text-white font-bold px-6 py-2 rounded-lg shadow-md hover:bg-[#e89b00] transition">
        🚀 Publish Post
      </button>
    </div>
  </form>
</div>

<script>
  const thumbnailInput = document.getElementById('thumbnail');
  const previewImage = document.getElementById('preview-image');
  const previewContainer = document.getElementById('preview-container');
  const fileError = document.getElementById('fileError');
  const titleInput = document.getElementById('title');
  const contentInput = document.getElementById('content');
  const titleError = document.getElementById('titleError');
  const contentError = document.getElementById('contentError');

  thumbnailInput.addEventListener('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      previewContainer.classList.remove('hidden');
      reader.onload = function () {
        previewImage.src = reader.result;
        previewImage.style.scale = 1;
      }
      reader.readAsDataURL(file);
    } else {
      previewContainer.classList.add('hidden');
    }
  });

  // Form validation before submit
  document.getElementById('createPostForm').addEventListener('submit', function(event) {
    let isValid = true;

    // Validate title
    if (!titleInput.value || titleInput.value.length > 100) {
      titleError.classList.remove('hidden');
      isValid = false;
    } else {
      titleError.classList.add('hidden');
    }

    // Validate content
    if (!contentInput.value || contentInput.value.length > 100000) {
      contentError.classList.remove('hidden');
      isValid = false;
    } else {
      contentError.classList.add('hidden');
    }

    // Validate file input
    if (!thumbnailInput.files.length || !['image/jpeg', 'image/png', 'image/gif'].includes(thumbnailInput.files[0].type)) {
      fileError.classList.remove('hidden');
      isValid = false;
    } else {
      fileError.classList.add('hidden');
    }

    if (!isValid) {
      event.preventDefault();
    }
  });

  // Drag & Drop
  const uploadArea = document.getElementById('upload-area');
  uploadArea.addEventListener('click', () => thumbnailInput.click());
  uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.classList.add('border-[#f8b102]');
  });
  uploadArea.addEventListener('dragleave', () => {
    uploadArea.classList.remove('border-[#f8b102]');
  });
  uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    thumbnailInput.files = e.dataTransfer.files;
    thumbnailInput.dispatchEvent(new Event('change'));
  });

  // Emoji in category
  document.addEventListener('DOMContentLoaded', () => {
    const options = document.querySelectorAll('#category option:not(:first-child)');
    options.forEach(option => {
      const emoji = option.getAttribute('data-emoji');
      option.textContent = `${emoji} ${option.textContent}`;
    });
  });

  // Zoom function
  let zoomLevel = 1;
  function zoom(factor) {
    zoomLevel = Math.min(2, Math.max(0.5, zoomLevel + factor));
    previewImage.style.scale = zoomLevel;
  }
</script>
